// Lists.
(define (flat_map l f)
  (cond
    ((nil? l) l)
    (t (concat (f (head l)) (flat_map (tail l) f)))))
(define (concat a b)
  (cond
    ((nil? a) b)
    ((nil? b) a)
    (t (cons (head a) (concat (tail a) b)))))
(define (drop l n)
  (cond
    ((nil? l) ())
    ((> n 0) (drop (tail l) (- n 1)))
    (t l)))
(define (take l n)
  (cond
    ((nil? l) ())
    ((> n 0) (cons (head l) (take (tail l) (- n 1))))))
(define (filter l f)
  (cond
    ((nil? l) ())
    ((f (head l)) (cons (head l) (filter (tail l) f)))
    (t (filter (tail l) f))))
(define (map l f)
  (cond
    ((nil? l) l)
    (t (cons (f (head l)) (map (tail l) f)))))
(define (nth l n)
  (cond
    ((> n 1) (nth (tail l) (- n 1)))
    (t (head l))))
(define (reverse l)
  (reverse_aux l ()))
(define (reverse_aux l a)
  (cond
    ((nil? l) a)
    (t (reverse_aux (tail l) (cons (head l) a)))))

// List aggregators.
(define (count l)
  (cond
    ((nil? l) 0)
    (t (+ 1 (count (tail l))))))
(define (min l)
  (reduce l (head l) (lambda (acc x) (cond ((< x acc) x) (t acc)))))
(define (max l)
  (reduce l (head l) (lambda (acc x) (cond ((> x acc) x) (t acc)))))
(define (sum l)
  (reduce l 0 (lambda (acc x) (+ acc x))))
(define (reduce l acc f)
  (cond
    ((nil? l) acc)
    (t (reduce (tail l) (f acc (head l)) f))))

// Sorting.
(define (sort l f)
  (cond
    ((or (nil? l) (nil? (tail l))) l)
    (t (join_sorted (sort (head (halves l)) f) (sort (head (tail (halves l))) f) f))))
(define (join_sorted a b f)
  (cond
    ((nil? a) b)
    ((nil? b) a)
    (((cond (f f) (t <)) (head a) (head b)) (cons (head a) (join_sorted (tail a) b f)))
    (t (cons (head b) (join_sorted a (tail b) f)))))
(define (halves l)
  (let ((hc (/ (count l) 2)))
    (list (take l hc) (drop l hc))))

// Ranges.
(define (range_inclusive start end)
  (cond
    ((< (- end start) 0) ())
    (t (cons start (range_inclusive (+ start 1) end)))))
(define (range_exclusive start end)
  (cond
    ((<= (- end start) 0) ())
    (t (cons start (range_exclusive (+ start 1) end)))))

// Math.
(define (<= a b)
  (or (= a b) (< a b)))
(define (>= a b)
  (or (= a b) (> a b)))
