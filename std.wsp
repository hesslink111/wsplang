(defmacro (if condition success failure)
  (list 'cond (list condition success) (list t failure)))

(defmacro (define signature body)
  (if (list? signature)
    (list 'setq (head signature) (list 'lambda (tail signature) body))
    (list 'setq signature body)))

// Maps.
(defmacro (make-map values)
  (list 'make-map-eval (list 'quote values)))

// Sets.
(defmacro (make-set values)
  (list 'make-map-eval (list 'map (cons 'list values) '(lambda (v) (list v t)))))
(define (set-add s value)
  (map-set s value t))
(define (set-contains s value)
  (map-get s value))

// Lists.
(define (flat-map l f)
  (if (nil? l)
    ()
    (concat (f (head l)) (flat-map (tail l) f))))
(define (concat a b)
  (cond
    ((nil? a) b)
    ((nil? b) a)
    (t (cons (head a) (concat (tail a) b)))))
(define (drop l n)
  (cond
    ((nil? l) ())
    ((> n 0) (drop (tail l) (- n 1)))
    (t l)))
(define (take l n)
  (cond
    ((nil? l) ())
    ((> n 0) (cons (head l) (take (tail l) (- n 1))))))
(define (filter l f)
  (cond
    ((nil? l) ())
    ((f (head l)) (cons (head l) (filter (tail l) f)))
    (t (filter (tail l) f))))
(define (map l f)
  (if (nil? l)
    ()
    (cons (f (head l)) (map (tail l) f))))
(define (nth l n)
  (if (> n 1)
    (nth (tail l) (- n 1))
    (head l)))
(define (reverse l)
  (reverse-aux l ()))
(define (reverse-aux l a)
  (if (nil? l)
    a
    (reverse-aux (tail l) (cons (head l) a))))

// List aggregators.
(define (count l)
  (if (nil? l)
    0
    (+ 1 (count (tail l)))))
(define (min l)
  (reduce l (head l) (lambda (acc x) (cond ((< x acc) x) (t acc)))))
(define (max l)
  (reduce l (head l) (lambda (acc x) (cond ((> x acc) x) (t acc)))))
(define (sum l)
  (reduce l 0 (lambda (acc x) (+ acc x))))
(define (reduce l acc f)
  (if (nil? l)
    acc
    (reduce (tail l) (f acc (head l)) f)))

// Sorting.
(define (sort l f)
  (if (or (nil? l) (nil? (tail l)))
    l
    (join-sorted (sort (head (halves l)) f) (sort (head (tail (halves l))) f) f)))
(define (join-sorted a b f)
  (cond
    ((nil? a) b)
    ((nil? b) a)
    (((cond (f f) (t <)) (head a) (head b)) (cons (head a) (join-sorted (tail a) b f)))
    (t (cons (head b) (join-sorted a (tail b) f)))))
(define (halves l)
  (let ((hc (/ (count l) 2)))
    (list (take l hc) (drop l hc))))

// Ranges.
(define (range-inclusive start end)
  (if (< (- end start) 0)
    ()
    (cons start (range-inclusive (+ start 1) end))))
(define (range-exclusive start end)
  (if (<= (- end start) 0)
    ()
    (cons start (range-exclusive (+ start 1) end))))

// Math.
(define (<= a b)
  (or (= a b) (< a b)))
(define (>= a b)
  (or (= a b) (> a b)))

// IO.
(define (print a)
  (begin
    (print-raw (to-string a))
    (print-line)))